name: CI

on:
  pull_request:
  push:
    branches: [main]

permissions: write-all

jobs:
  prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
      - run: corepack enable
      - run: npm install --frozen-lockfile || npm install
      - name: Audit dependencies
        run: npm audit --omit=dev --audit-level=moderate
      - name: Prettier
        run: npm run prettier:check

  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
      - run: corepack enable
      - run: npm install --frozen-lockfile || npm install
      - name: Audit dependencies
        run: npm audit --omit=dev --audit-level=moderate
      - name: ESLint
        run: npm run lint

  stylelint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
      - run: corepack enable
      - run: npm install --frozen-lockfile || npm install
      - name: Audit dependencies
        run: npm audit --omit=dev --audit-level=moderate
      - name: Stylelint
        run: npm run stylelint

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
      - run: corepack enable
      - run: npm install --frozen-lockfile || npm install
      - name: Audit dependencies
        run: npm audit --omit=dev --audit-level=moderate
      - name: Typecheck
        run: npm run typecheck

  dotnet-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Format check
        run:
          dotnet format --no-restore --verify-no-changes
          src/server/Server.csproj

  dotnet-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore tests/server/Server.Tests.csproj
      - name: Test
        run:
          dotnet test tests/server/Server.Tests.csproj --logger
          "trx;LogFileName=results.trx" --collect:"XPlat Code Coverage"
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-coverage
          path: tests/server/TestResults

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
      - run: corepack enable
      - run: npm install --frozen-lockfile || npm install
      - name: Audit dependencies
        run: npm audit --omit=dev --audit-level=moderate
      - name: Unit tests
        run: npm test -- --shard=${{ matrix.shard }}/2
      - name: Debug coverage files
        run: ls -R coverage
      - name: Rename coverage folder
        if: always()
        run: mv coverage "coverage-${{ matrix.shard }}"
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.shard }}
          path: coverage-${{ matrix.shard }}

  merge-coverage:
    if: always()
    needs:
      - unit-tests
      - dotnet-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
      - run: corepack enable
      - name: Download coverage shard 1
        uses: actions/download-artifact@v4
        with:
          name: coverage-1
          path: coverage-1
      - name: Download coverage shard 2
        uses: actions/download-artifact@v4
        with:
          name: coverage-2
          path: coverage-2
      - name: Download dotnet coverage
        uses: actions/download-artifact@v4
        with:
          name: dotnet-coverage
          path: dotnet-coverage
      - name: Debug downloaded coverage files
        run: ls -R .
      - name: Merge coverage
        run: |
          mkdir -p coverage
          npx lcov-result-merger "coverage-*/lcov.info" coverage/lcov.info
          cat coverage-*/sonar-report.xml > coverage/sonar-report.xml
          cp dotnet-coverage/**/coverage.cobertura.xml coverage/coverage.cobertura.xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage

  sonar:
    if: always()
    needs: merge-coverage
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"fenrick_MiroDiagraming" /o:"fenrick" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="coverage\coverage.cobertura.xml" /d:sonar.javascript.lcov.reportPaths="coverage\lcov.info" /s:sonar-project.properties
          dotnet build src/server/Server.csproj
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  codeql:
    if: always()
    needs: unit-tests
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          - language: javascript-typescript
            build-mode: none
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build:
    needs: sonar
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
      - run: corepack enable
      - run: npm install --frozen-lockfile || npm install
      - name: Cache Storybook
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/storybook
          key: ${{ runner.os }}-storybook-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-storybook-
      - name: Audit dependencies
        run: npm audit --omit=dev --audit-level=moderate
      - name: Build
        run: npm run build
      - name: Build Storybook
        run: npm run build-storybook
      - name: Verify Storybook
        run: test -d storybook-static
      - name: Upload artefact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist

  release:
    if: github.event_name == 'push'
    needs:
      - prettier
      - eslint
      - stylelint
      - typecheck
      - dotnet-format
      - dotnet-tests
      - unit-tests
      - sonar
      - codeql
      - build
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.release_tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'
      - run: corepack enable
      - run: npm install --frozen-lockfile || npm install
      - name: Audit dependencies
        run: npm audit --omit=dev --audit-level=moderate
      - name: Download artefact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
      - name: Semantic release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
      - name: Check release tag
        id: release_tag
        run: |
          git fetch --tags
          tag=$(git tag --points-at HEAD | head -n 1)
          if [ -n "$tag" ]; then
            echo "tag=$tag" >> "$GITHUB_OUTPUT"
          fi

  docker-image:
    if: needs.release.outputs.tag != ''
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=${{ needs.release.outputs.tag }}
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  rollback:
    if: failure() && github.event_name == 'push'
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Use previous artefact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
      - name: Deploy previous artefact
        run: echo "Rollback to previous artefact"
